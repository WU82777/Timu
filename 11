 
 
Question at position 2 


 

What is the tightest complexity that describes the following code fragment?

 

int sum1 = 0;

int sum2 = 0;

for (int i = 1; i < n; i = i

4) {

                sum1++;

                sum2++;                

 }

 

O(log n)

O(n4)

O(n)

O(n2)




Question at position 3 


What is the tightest complexity that describes the following code fragment?

 

int sum = 0;

for (int i=0; i < n; i++) {

      for (int j=0; j < n; j++) {

            if(i == j) {

                  for (int k=0; k < n; k++) {

                        sum++;

                 } 

            }

      }

}

O(n2)

O(log n)

O (n)

O(n log n)


Question at position 4
4 
2 points 

What is the tightest complexity that describes the following code fragment?

 

int sum = 0;

for (int i=0; i < n; i++) {

      for (int j=0; j < i
i

i; j++) {

           sum++;

      }

}

O(n3)

O(n)

O(n4)

O(n2)



Question at position 5
5
 
5 points 
 
 

 Which statements are correct?  (Multiple answers)

If f(n)=o(g(n)), then f(n)=O(g(n)).

if f(n)=

(g(n)), then f(n)=O(g(n)).

denotes the best case complexity.

If f(n)=O(g(n)), then f(n)=o(g(n)).

n2=o(n2)

Big O and Little o are upper bound notations.

is a tight bound notation.

If f(n)=

(g(n)), then g(n)=O(f(n)).

If f(n)=o(g(n)) and g(n)=o(h(n)), then f(n)=o(h(n)).

n3=

(n4)
Question at position 6
6
 
5 points 
 
 
Question at position 6 

Order the following formulas from slowest (1) to fastest (8) growth rate.
Prompt 1n^n
Answer for prompt 1 n^n
Prompt 2n^2*log(n^3)
Answer for prompt 2 n^2*log(n^3)
Prompt 3n!
Answer for prompt 3 n!
Prompt 4n^2+1
Answer for prompt 4 n^2+1
Prompt 5n log(n)
Answer for prompt 5 n log(n)
Prompt 62^n
Answer for prompt 6 2^n
Prompt 7log(n)
Answer for prompt 7 log(n)
Prompt 8n^3
Answer for prompt 8 n^3
Question at position 7
7
 
3 points 
 
 
Question at position 7 

Find a, b and d master theorem parameters for the following code:

 

int f(int n) {


     if (n < 2) return 0;

 

     int sum = 0;

 

     for (int i = 0; i < n; i++) {
          sum++;

     }

 

     return f(n/2) + 2f(n/2) + sum;
}

 

a=Question Blank 1 of 3, b=Question Blank 2 of 3, d=Question Blank 3 of 3.
Question at position 8
8
 
3 points 
 
 
Question at position 8 

Find a, b and d master theorem parameters for the merge sorting algorithm.

a=Question Blank 1 of 3, b=Question Blank 2 of 3, d=Question Blank 3 of 3.
Question at position 9
9
 
3 points 
 
 
Question at position 9 

Which sorting algorithms provide computational complexity O(n) in the best case.

Which sorting algorithms provide computational complexity O(n) in the best case.

Selection sort

Merge sort

Quick sort

Insertion sort
Question at position 10
10
 
3 points 
 
 
Question at position 10 

Which of the following statements are true about linked lists.

 

Select all that apply.

Which of the following statements are true about linked lists.

 

Select all that apply.

Deleting a node from front of a singly linked list with head pointer only can be done in O(1).

Deleting a node from end of a singly linked list with head pointer only can be done in O(1).

Inserting a node at front of a singly linked with head pointer only list can be done in O(1).

The time complexity for traversing a singly linked list is O(1).

Linked lists utilise contiguous memory.
Stimulus for question at position: 11
The following text applies to the questions at positions 11
Linked list coding - 7 marks

Your task is to complete the implementation of the functions of a linked list class. The positions of nodes are defined as 0 through n-1, where n is the number of nodes in the list.

Complete the implementation of the following two functions to their respective specifications.

    bool swap(int pos1, int pos2) - swaps the data at positions pos1 and pos2 then returns true. [4 marks]
        If a or b are out-of-bounds, return false without swapping any elements.
    bool find_and_delete(int target) - searches the list for a node containing target, which then deletes it and returns true. [3 marks]
        If target appears multiple times in the list, delete the first occurrence.
        If target does not exist in the list return false.

Download, edit, and submit the following files: LinkedList.cpp
Download LinkedList.cpp, LinkedList.h Download LinkedList.h, Node.cpp Download Node.cpp, Node.h

Download Node.h

 

Do NOT include your main function in this file.
Question at position 11
11
 
1 point 
 
 
Question at position 11 

Submit the code question to Practical Exam 2 - code submission.

 

Each time you submit, include ALL code that you have completed so far for this exam.


Copy and paste the code returned by Gradescope here Question Blank 1 of 1. You will find this code in the messages at the top of the Gradescope output.
